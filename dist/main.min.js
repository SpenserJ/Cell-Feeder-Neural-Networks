'use strict';

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Circle = (function () {
  function Circle(radius, x, y) {
    _classCallCheck(this, Circle);

    this.radius = radius;
    this.mass = calculateArea(radius);
    this.position = {
      x: x,
      y: y };
    this.background = 'yellow';
    this.border = '#d6d62a';
  }

  _createClass(Circle, [{
    key: 'hasCollided',
    value: function hasCollided(target) {
      return this.radius + target.object.radius >= target.distance;
    }
  }, {
    key: 'tick',
    value: function tick() {}
  }, {
    key: 'draw',
    value: function draw(context) {
      context.beginPath();
      context.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI, false);
      context.fillStyle = this.background;
      context.fill();
      context.lineWidth = 2;
      context.strokeStyle = this.border;
      context.stroke();
    }
  }]);

  return Circle;
})();

;

var Cell = (function (_Circle) {
  function Cell(radius, x, y) {
    _classCallCheck(this, Cell);

    _get(Object.getPrototypeOf(Cell.prototype), 'constructor', this).call(this, radius, x, y);

    this.updateSpeed();
    this.isDead = false;
    this.background = 'green';
    this.border = '#003300';
  }

  _inherits(Cell, _Circle);

  _createClass(Cell, [{
    key: 'updateSpeed',
    value: function updateSpeed() {
      this.speed = 1 / (Math.log(this.mass) / Math.log(calculateArea(10)));
    }
  }, {
    key: 'look',
    value: function look(actors) {
      var self = this;
      var nearby = [];
      actors.forEach(function (item) {
        // Don't detect ourselves.
        if (self === item) {
          return;
        }

        var distance = Math.sqrt(Math.pow(item.position.x - self.position.x, 2) + Math.pow(item.position.y - self.position.y, 2));
        var is_edible = item.mass <= self.mass * 0.9;
        var is_dangerous = self.mass <= item.mass * 0.9 && item.constructor.name === 'Cell';
        nearby.push({
          distance: distance,
          type: item.constructor.name,
          is_edible: is_edible,
          is_dangerous: is_dangerous,
          object: item });
      });
      self.nearby = nearby;
    }
  }, {
    key: 'move',
    value: function move(x, y) {
      x = x * this.speed;
      y = y * this.speed;
      this.position.x += x;
      this.position.y += y;
    }
  }, {
    key: 'tick',
    value: function tick() {
      var self = this;

      var nearby = this.nearby.sort(function (a, b) {
        return a.distance - b.distance;
      });

      nearby = nearby.filter(function (target) {
        if (self.hasCollided(target) && target.is_edible) {
          target.object.isDead = true;
          self.mass += target.object.mass;
          self.radius = calculateRadius(self.mass);
          self.updateSpeed();
          return false;
        }
        return true;
      });

      var nearbyFood = nearby.filter(function (target) {
        return target.is_edible;
      });

      if (nearbyFood.length === 0) {
        this.move(getRandomArbitrary(-1, 1), getRandomArbitrary(-1, 1));
      } else {
        var closest = nearbyFood[0];
        var deltaX = closest.object.position.x - this.position.x;
        var deltaY = closest.object.position.y - this.position.y;
        var angle = Math.atan2(deltaY, deltaX) * 180 / Math.PI;
        this.move(Math.cos(angle), Math.sin(angle));
      }
    }
  }]);

  return Cell;
})(Circle);

;

var Food = (function (_Circle2) {
  function Food(radius, x, y) {
    _classCallCheck(this, Food);

    _get(Object.getPrototypeOf(Food.prototype), 'constructor', this).call(this, radius, x, y);
    this.isDead = false;
  }

  _inherits(Food, _Circle2);

  return Food;
})(Circle);

function getRandomArbitrary(min, max) {
  return Math.random() * (max - min) + min;
}

function calculateRadius(area) {
  return Math.sqrt(area / Math.PI);
}

function calculateArea(radius) {
  return Math.PI * Math.pow(radius, 2);
}

(function () {
  'use strict';

  var canvas = document.getElementById('game');
  var context = canvas.getContext('2d');

  var actors = [];

  function tick() {
    var i;

    var food = actors.filter(function (item) {
      return item instanceof Food;
    });
    var cells = actors.filter(function (item) {
      return item instanceof Cell;
    });

    for (i = food.length; i < 8; i++) {
      actors.push(new Food(getRandomArbitrary(2, 10), getRandomArbitrary(0, canvas.width), getRandomArbitrary(0, canvas.height)));
    }

    for (i = cells.length; i < 5; i++) {
      actors.push(new Cell(10, getRandomArbitrary(0, canvas.width), getRandomArbitrary(0, canvas.height)));
    }

    for (i = 0; i < actors.length; i++) {
      var cell = actors[i];
      if (typeof cell.look === 'function') {
        cell.look(actors);
      }
      cell.tick();
    }

    render();
  }

  function render() {
    var i;

    actors = actors.filter(function (item) {
      return !item.isDead;
    });
    context.clearRect(0, 0, canvas.width, canvas.height);

    for (i = 0; i < actors.length; i++) {
      actors[i].draw(context);
    }

    requestAnimationFrame(tick);
  }
  render();
})();